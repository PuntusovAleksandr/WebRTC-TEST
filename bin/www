#!/usr/bin/env node

/**
 * Module dependencies.
 */

const crypto = require('crypto'),
    https = require('https'),
    fs = require("fs"),
    app = require('../app'),
    debug = require('debug')('AppRTC-node-server:server'),
    http = require('http');

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);
const port = 3000, portSSL = 4433;


/**
 * Create HTTP server.
 */
var httpsOptions = {
    key: fs.readFileSync('./bin/client-key.pem'),
    cert: fs.readFileSync('./bin/client-cert.pem')
};

var server = http.createServer(app);
var serverSSL = https.createServer(httpsOptions, app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.info('Server listening on port ' + port);
});

serverSSL.listen(portSSL, function () {
    console.info('Server listening on port ' + portSSL);
});

server.on('error', onError);
server.on('listening', onListening);

// ==============================================
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
